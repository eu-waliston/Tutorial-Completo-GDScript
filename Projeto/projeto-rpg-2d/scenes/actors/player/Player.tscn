# scripts/actors/Player.gd
extends CharacterBody2D

@export var speed: float = 300.0
@export var health: int = 100
@export var max_health: int = 100
@export var mana: int = 50
@export var max_mana: int = 50

@onready var animation_player = $AnimationPlayer
@onready var sprite = $Sprite2D

var is_attacking: bool = false
var input_vector: Vector2 = Vector2.ZERO

func _ready():
    GameManager.player = self

func _process(delta):
    if is_attacking:
        return

    handle_input()
    handle_animation()
    move_and_slide()

func handle_input():
    input_vector = Vector2.ZERO
    input_vector.x = Input.get_action_strength("move_right") - Input.get_action_strength("move_left")
    input_vector.y = Input.get_action_strength("move_down") - Input.get_action_strength("move_up")
    input_vector = input_vector.normalized()

    velocity = input_vector * speed

    if Input.is_action_just_pressed("attack"):
        attack()

func handle_animation():
    if input_vector != Vector2.ZERO:
        animation_player.play("walk")
        if input_vector.x != 0:
            sprite.flip_h = input_vector.x < 0
    else:
        animation_player.play("idle")

func attack():
    is_attacking = true
    animation_player.play("attack")
    await animation_player.animation_finished
    is_attacking = false

func take_damage(amount: int):
    health -= amount
    health = max(0, health)
    GameEvents.emit_signal("player_health_changed", health, max_health)

    if health <= 0:
        die()

func heal(amount: int):
    health += amount
    health = min(health, max_health)
    GameEvents.emit_signal("player_health_changed", health, max_health)

func die():
    GameEvents.emit_signal("player_died")
    queue_free()